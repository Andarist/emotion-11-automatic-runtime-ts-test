diff --git a/node_modules/typescript/lib/tsc.js b/node_modules/typescript/lib/tsc.js
index 793d9e1..cf5aef4 100644
--- a/node_modules/typescript/lib/tsc.js
+++ b/node_modules/typescript/lib/tsc.js
@@ -35922,66 +35922,83 @@ var ts;
         builtinGlobals.set(undefinedSymbol.escapedName, undefinedSymbol);
         initializeTypeChecker();
         return checker;
-        function getJsxNamespace(location) {
-            if (location) {
-                var file = ts.getSourceFileOfNode(location);
-                if (file) {
-                    if (ts.isJsxOpeningFragment(location)) {
-                        if (file.localJsxFragmentNamespace) {
-                            return file.localJsxFragmentNamespace;
-                        }
-                        var jsxFragmentPragma = file.pragmas.get("jsxfrag");
-                        if (jsxFragmentPragma) {
-                            var chosenPragma = ts.isArray(jsxFragmentPragma) ? jsxFragmentPragma[0] : jsxFragmentPragma;
-                            file.localJsxFragmentFactory = ts.parseIsolatedEntityName(chosenPragma.arguments.factory, languageVersion);
-                            ts.visitNode(file.localJsxFragmentFactory, markAsSynthetic);
-                            if (file.localJsxFragmentFactory) {
-                                return file.localJsxFragmentNamespace = ts.getFirstIdentifier(file.localJsxFragmentFactory).escapedText;
-                            }
-                        }
-                        var entity = getJsxFragmentFactoryEntity(location);
-                        if (entity) {
-                            file.localJsxFragmentFactory = entity;
-                            return file.localJsxFragmentNamespace = ts.getFirstIdentifier(entity).escapedText;
-                        }
+        function markAsSynthetic(node) {
+            setTextRangePosEnd(node, -1, -1);
+            return visitEachChild(node, markAsSynthetic, nullTransformationContext);
+        }
+
+        function getLocalClassicJsxNamespace(location) {
+            if (!location) {
+                return;
+            }
+
+            const file = ts.getSourceFileOfNode(location);
+
+            if (!file) {
+                return;
+            }
+
+            if (ts.isJsxOpeningFragment(location)) {
+                if (file.localJsxFragmentNamespace) {
+                    return file.localJsxFragmentNamespace;
+                }
+                const jsxFragmentPragma = file.pragmas.get("jsxfrag");
+                if (jsxFragmentPragma) {
+                    const chosenPragma = isArray(jsxFragmentPragma) ? jsxFragmentPragma[0] : jsxFragmentPragma;
+                    file.localJsxFragmentFactory = parseIsolatedEntityName(chosenPragma.arguments.factory, languageVersion);
+                    visitNode(file.localJsxFragmentFactory, markAsSynthetic);
+                    if (file.localJsxFragmentFactory) {
+                        return file.localJsxFragmentNamespace = getFirstIdentifier(file.localJsxFragmentFactory).escapedText;
                     }
-                    else {
-                        if (file.localJsxNamespace) {
-                            return file.localJsxNamespace;
-                        }
-                        var jsxPragma = file.pragmas.get("jsx");
-                        if (jsxPragma) {
-                            var chosenPragma = ts.isArray(jsxPragma) ? jsxPragma[0] : jsxPragma;
-                            file.localJsxFactory = ts.parseIsolatedEntityName(chosenPragma.arguments.factory, languageVersion);
-                            ts.visitNode(file.localJsxFactory, markAsSynthetic);
-                            if (file.localJsxFactory) {
-                                return file.localJsxNamespace = ts.getFirstIdentifier(file.localJsxFactory).escapedText;
-                            }
-                        }
+                }
+                const entity = getJsxFragmentFactoryEntity(location);
+                if (entity) {
+                    file.localJsxFragmentFactory = entity;
+                    return file.localJsxFragmentNamespace = getFirstIdentifier(entity).escapedText;
+                }
+            }
+            else {
+                if (file.localJsxNamespace) {
+                    return file.localJsxNamespace;
+                }
+                const jsxPragma = file.pragmas.get("jsx");
+                if (jsxPragma) {
+                    const chosenPragma = isArray(jsxPragma) ? jsxPragma[0] : jsxPragma;
+                    file.localJsxFactory = parseIsolatedEntityName(chosenPragma.arguments.factory, languageVersion);
+                    visitNode(file.localJsxFactory, markAsSynthetic);
+                    if (file.localJsxFactory) {
+                        return file.localJsxNamespace = getFirstIdentifier(file.localJsxFactory).escapedText;
                     }
                 }
             }
+        }
+
+        function getConfigClassicJsxNamespace() {
             if (!_jsxNamespace) {
-                _jsxNamespace = "React";
+                _jsxNamespace = "React"
                 if (compilerOptions.jsxFactory) {
-                    _jsxFactoryEntity = ts.parseIsolatedEntityName(compilerOptions.jsxFactory, languageVersion);
-                    ts.visitNode(_jsxFactoryEntity, markAsSynthetic);
+                    _jsxFactoryEntity = parseIsolatedEntityName(compilerOptions.jsxFactory, languageVersion);
+                    visitNode(_jsxFactoryEntity, markAsSynthetic);
                     if (_jsxFactoryEntity) {
-                        _jsxNamespace = ts.getFirstIdentifier(_jsxFactoryEntity).escapedText;
+                        _jsxNamespace = getFirstIdentifier(_jsxFactoryEntity).escapedText;
                     }
                 }
                 else if (compilerOptions.reactNamespace) {
-                    _jsxNamespace = ts.escapeLeadingUnderscores(compilerOptions.reactNamespace);
+                    _jsxNamespace = escapeLeadingUnderscores(compilerOptions.reactNamespace);
                 }
             }
             if (!_jsxFactoryEntity) {
                 _jsxFactoryEntity = ts.factory.createQualifiedName(ts.factory.createIdentifier(ts.unescapeLeadingUnderscores(_jsxNamespace)), "createElement");
             }
             return _jsxNamespace;
-            function markAsSynthetic(node) {
-                ts.setTextRangePosEnd(node, -1, -1);
-                return ts.visitEachChild(node, markAsSynthetic, ts.nullTransformationContext);
+        }
+
+        function getJsxNamespace(location) {
+            const localClassicJsxNamespace = getLocalClassicJsxNamespace(location);
+            if (localClassicJsxNamespace) {
+                return localClassicJsxNamespace;
             }
+            return getConfigClassicJsxNamespace();
         }
         function getEmitResolver(sourceFile, cancellationToken) {
             getDiagnostics(sourceFile, cancellationToken);
@@ -55286,11 +55303,24 @@ var ts;
                 return links.jsxNamespace;
             }
             if (!links || links.jsxNamespace !== false) {
-                var namespaceName = getJsxNamespace(location);
-                var resolvedNamespace = resolveName(location, namespaceName, 1920, undefined, namespaceName, false);
-                if (!resolvedNamespace || resolvedNamespace === unknownSymbol) {
+                // var namespaceName = getJsxNamespace(location);
+                // var resolvedNamespace = resolveName(location, namespaceName, 1920, undefined, namespaceName, false);
+                // if (!resolvedNamespace || resolvedNamespace === unknownSymbol) {
+                //     resolvedNamespace = getJsxNamespaceContainerForImplicitImport(location);
+                // }
+
+                let resolvedNamespace
+                let namespaceName = getLocalClassicJsxNamespace(location);
+                if (!namespaceName) {
                     resolvedNamespace = getJsxNamespaceContainerForImplicitImport(location);
                 }
+                if (!resolvedNamespace) {
+                    if (!namespaceName) {
+                        namespaceName = getConfigClassicJsxNamespace();
+                    }
+                    resolvedNamespace = resolveName(location, namespaceName, 1920, undefined, namespaceName, false);
+                }
+
                 if (resolvedNamespace) {
                     var candidate = resolveSymbol(getSymbol(getExportsOfSymbol(resolveSymbol(resolvedNamespace)), JsxNames.JSX, 1920));
                     if (candidate && candidate !== unknownSymbol) {
